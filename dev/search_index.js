var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OteraEngine","category":"page"},{"location":"#OteraEngine.jl","page":"Home","title":"OteraEngine.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OteraEngine.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is very very small, but useful. When you use this package with Genie.jl, you can create dynamic and powerful pages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have any questions about this, please write issues on GitHub!","category":"page"},{"location":"#Resources","page":"Home","title":"Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documents(This Page)\nsource","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Installation","page":"Tutorial","title":"Installation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OteraEngine can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"pkg > add OteraEngine","category":"page"},{"location":"tutorial/#Usage","page":"Tutorial","title":"Usage","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Acutually, this package has only two structure and function, but these are very powerful because of Metaprogramming function of Julia.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Template","category":"page"},{"location":"tutorial/#Main.OteraEngine.Template","page":"Tutorial","title":"Main.OteraEngine.Template","text":"Template(html::String; path::Bool=true, config_path::String=\"\",\n    config::Dict{String, T} = Dict(\n        \"code_block_start\"=>\"```\",\n        \"code_block_stop\"=>\"```\"\n    )\n)\n\nThis is the only structure and function of this package. This structure has 2 parameter,\n\nhtml is the path to the HTML file or HTML of String type.\npath determines whether the parameter html represents the file path. The default value is true.\nconfig_path is path to config file. The suffix of config file must be toml.\nconfig is configuration of Template. It is type of Dict, and now there are two settings bellow.\ncode_block_start : The string at the start of code blocks.\ncode_block_stop : The string at the end of code blocks.\n\nConfig File\n\nA config file must be written in TOML format. like this:\n\ncode_block_start = \"{{\"\ncode_block_stop = \"}}\"\n\nThe item is the same as the argiment config.\n\nHTML\n\nYou can write the code of Template in JuliaLang, and just write the variables you want to output to a HTML at the end of the code. The code needs to be enclosed by ``(This can be changed byconfig` variable).\n\nFor exmaple, this HTML work:\n\n<html>\n    <head><title>OteraEngine Test</title></head>\n    <body>\n        Hello, ```usr```!\n    </body>\n</html>\n\nRendering\n\nAfter you create a Template, you just have to execute the codes! For this, you use the Function-like Object of Template structure.tmp(; init::Dict{String, T}) where T <: Any variables are initialized by init(init is the parameter for Function-like Object). init must be Dicttype. If you don't pass the init, the initialization won't be done. Please see the example below.\n\nExample\n\ntmp = Template(\"./test1.html\") #The last HTML code\ninit = Dict(\"usr\"=>\"OteraEngine\")\nresult = tmp(init)\nprintln(result)\n\n\n\n\n\n","category":"type"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Specifically, you can also do this.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#HTML Template File\n<html>\n    <head><title>MyPage</title></head>\n    <body>\n        The current time is <strong>\n        ```\n        using Dates\n        now()\n        ```\n        </strong>\n    </body>\n</html>","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#Julia code\nusing OteraEngine\n\ntmp = Template(\"./time.html\") #The last HTML\nprintln(tmp())\n#The current time comes in the last HTML code intead of the Julia code and returns it.","category":"page"}]
}
