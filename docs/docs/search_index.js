var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Jinja","category":"page"},{"location":"#Jinja.jl","page":"Home","title":"Jinja.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Jinja.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is very very small, but useful. When you use this package with Genie.jl, you can create dynamic and powerful pages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have any questions about this, please write issues on GitHub!","category":"page"},{"location":"#Resources","page":"Home","title":"Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documents(This Page)\nsource","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Installation","page":"Tutorial","title":"Installation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Jinja can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"pkg > add Jinja","category":"page"},{"location":"tutorial/#Usage","page":"Tutorial","title":"Usage","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Acutually, this package has only two structure and function, but these are very powerful because of Metaprogramming function of Julia.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Template","category":"page"},{"location":"tutorial/#Main.Jinja.Template","page":"Tutorial","title":"Main.Jinja.Template","text":"Template(html::String; path::Bool=true)\n\nThis is the only structure and function of this package. This structure has 2 parameter,\n\nhtml is the path to the HTML file or HTML of String type.\npath determines whether the parameter html represents the file path. The default value is true.\n\nHTML\n\nYou can write the code of Template in JuliaLang, and just write the variables you want to output to a HTML at the end of the code. The code needs to be enclosed by ```.\n\nFor exmaple, this HTML work:\n\n<html>\n    <head><title>Jinja Test</title></head>\n    <body>\n        Hello, `usr`!\n    </body>\n</html>\n\nRendering\n\nAfter you create a Template, you just have to execute the codes! For this, you use the Function-like Object of Template structure.     tmp(; init::Expr) variables are initialized by init(init is the parameter for Function-like Object). init must be Exprtype. If you don't pass the init, the initialization won't be done. Please see the example below.\n\nExample\n\ntmp = Template(\"./test1.html\") #The last HTML code\ninit = quote\n    usr=\"Julia\"\nend\nresult = tmp(init)\nprintln(result)\n\n\n\n\n\n","category":"type"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Specifically, you can also do this.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#HTML Template File\n<html>\n    </head><title>MyPage</title><head>\n    <body>\n        The current time is <strong>\n        `\n        using Dates\n        now()\n        `\n        </strong>\n    </body>\n</html>","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#Julia code\nusing Jinja\n\ntmp = Template(\"./time.html\") #The last HTML\nprintln(tmp())\n#The current time comes in the last HTML code intead of the Julia code and returns it.","category":"page"}]
}
